// This is your Prisma schema file for SQLite development,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  documents     Document[]
  folders       Folder[]
  sharedDocs    DocumentShare[]
  comments      Comment[]
}

model Document {
  id            String    @id @default(cuid())
  name          String
  description   String?
  mimeType      String
  size          Int
  url           String
  version       Int       @default(1)
  tags          String    @default("[]") // JSON array stored as string
  metadata      String?   // JSON stored as string
  
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  folderId      String?
  folder        Folder?   @relation(fields: [folderId], references: [id])
  
  shares        DocumentShare[]
  comments      Comment[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Folder {
  id            String    @id @default(cuid())
  name          String
  description   String?
  
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  parentId      String?
  parent        Folder?   @relation("FolderToFolder", fields: [parentId], references: [id])
  children      Folder[]  @relation("FolderToFolder")
  
  documents     Document[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Tag {
  id            String    @id @default(cuid())
  name          String    @unique
  color         String?
  
  createdAt     DateTime  @default(now())
}

model DocumentShare {
  id            String    @id @default(cuid())
  permission    String
  expiresAt     DateTime?
  
  documentId    String
  document      Document  @relation(fields: [documentId], references: [id])
  
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  createdAt     DateTime  @default(now())
  
  @@unique([documentId, userId])
}

model Comment {
  id            String    @id @default(cuid())
  content       String
  
  documentId    String
  document      Document  @relation(fields: [documentId], references: [id])
  
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
