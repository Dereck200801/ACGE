import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function createAdmin() {
  try {
    // V√©rifier si un admin existe d√©j√†
    const existingAdmin = await prisma.user.findFirst({
      where: { role: 'ADMIN' }
    })

    if (existingAdmin) {
      console.log('‚ùå Un administrateur existe d√©j√† dans la base de donn√©es.')
      console.log(`Email: ${existingAdmin.email}`)
      return
    }

    // Donn√©es de l'administrateur par d√©faut
    const adminData = {
      name: 'Administrateur',
      email: 'admin@ged.local',
      password: 'admin123', // √Ä changer en production !
      role: 'ADMIN' as const
    }

    // Hasher le mot de passe
    const hashedPassword = await bcrypt.hash(adminData.password, 12)

    // Cr√©er l'administrateur
    const admin = await prisma.user.create({
      data: {
        name: adminData.name,
        email: adminData.email,
        password: hashedPassword,
        role: adminData.role
      }
    })

    console.log('‚úÖ Administrateur cr√©√© avec succ√®s !')
    console.log('üìß Email:', admin.email)
    console.log('üîë Mot de passe:', adminData.password)
    console.log('‚ö†Ô∏è  IMPORTANT: Changez le mot de passe apr√®s la premi√®re connexion !')

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'administrateur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter le script
createAdmin()
