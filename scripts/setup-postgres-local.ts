import fs from 'fs'
import path from 'path'

async function setupPostgreSQLLocal() {
  try {
    console.log('üêò Configuration de PostgreSQL local...')

    // Cr√©er le fichier .env.local pour PostgreSQL local
    const envPath = path.join(process.cwd(), '.env.local')
    const envContent = `# Base de donn√©es PostgreSQL locale
# Assurez-vous que PostgreSQL est install√© et en cours d'ex√©cution
# Cr√©ez la base de donn√©es : createdb ged_database
DATABASE_URL="postgresql://postgres:password@localhost:5432/ged_database"

# Configuration NextAuth
NEXTAUTH_URL="http://localhost:3000"
NEXTAUTH_SECRET="dev-secret-key-change-in-production-${Math.random().toString(36).substring(7)}"

# Environment
NODE_ENV="development"

# Configuration upload (optionnel)
UPLOAD_MAX_SIZE="10485760"  # 10MB
UPLOAD_DIR="./uploads"`

    fs.writeFileSync(envPath, envContent)
    console.log('‚úÖ Fichier .env.local cr√©√© pour PostgreSQL local')

    console.log('\nüóÑÔ∏è Instructions PostgreSQL local :')
    console.log('1. Assurez-vous que PostgreSQL est d√©marr√©')
    console.log('2. Cr√©ez la base de donn√©es : createdb ged_database')
    console.log('3. Ou utilisez pgAdmin/psql pour cr√©er la DB')
    console.log('4. Modifiez le mot de passe dans .env.local si n√©cessaire')
    
    console.log('\nüîÑ √âtapes suivantes :')
    console.log('1. G√©n√©rer le client Prisma : npm run db:generate')
    console.log('2. Cr√©er les tables : npm run db:push')
    console.log('3. Cr√©er un admin : npm run create-admin')
    console.log('4. D√©marrer l\'app : npm run dev')

    console.log('\nüí° Alternative Docker :')
    console.log('Si vous voulez utiliser Docker, d√©marrez Docker Desktop et utilisez :')
    console.log('npm run setup:postgres && docker-compose up -d postgres')

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error)
  }
}

// Ex√©cuter le script
setupPostgreSQLLocal()
