#!/usr/bin/env tsx

import { execSync } from 'child_process';
import { writeFileSync, readFileSync, existsSync } from 'fs';

console.log('üè≠ Configuration pour la production...\n');

// 1. Optimiser next.config.ts pour la production
console.log('‚öôÔ∏è Optimisation de next.config.ts...');

const nextConfigPath = 'next.config.ts';
if (existsSync(nextConfigPath)) {
  const currentConfig = readFileSync(nextConfigPath, 'utf8');
  
  // Ajouter des optimisations si elles ne sont pas pr√©sentes
  if (!currentConfig.includes('compress: true')) {
    const optimizedConfig = `import { NextConfig } from 'next';

const nextConfig: NextConfig = {
  // Optimisations pour la production
  compress: true,
  poweredByHeader: false,
  
  // Configuration des images
  images: {
    unoptimized: false,
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '**',
      },
    ],
  },
  
  // Configuration exp√©rimentale
  experimental: {
    optimizePackageImports: ['lucide-react', '@radix-ui/react-icons'],
  },
  
  // Headers de s√©curit√©
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'Referrer-Policy',
            value: 'origin-when-cross-origin',
          },
        ],
      },
    ];
  },
};

export default nextConfig;`;

    writeFileSync(nextConfigPath, optimizedConfig);
    console.log('  ‚úÖ next.config.ts optimis√©');
  } else {
    console.log('  ‚úÖ next.config.ts d√©j√† optimis√©');
  }
}

// 2. Cr√©er un .gitignore optimis√© si n√©cessaire
console.log('\nüìù V√©rification de .gitignore...');
const gitignorePath = '.gitignore';
const requiredIgnores = [
  '.env.local',
  '.env*.local',
  '.vercel',
  'uploads/*',
  '!uploads/.gitkeep',
  'prisma/dev.db*',
  '.railway',
  'fly.toml',
  'render.yaml'
];

if (existsSync(gitignorePath)) {
  let gitignore = readFileSync(gitignorePath, 'utf8');
  let updated = false;
  
  requiredIgnores.forEach(ignore => {
    if (!gitignore.includes(ignore)) {
      gitignore += `\n${ignore}`;
      updated = true;
    }
  });
  
  if (updated) {
    writeFileSync(gitignorePath, gitignore);
    console.log('  ‚úÖ .gitignore mis √† jour');
  } else {
    console.log('  ‚úÖ .gitignore d√©j√† configur√©');
  }
}

// 3. Cr√©er un fichier .gitkeep pour le dossier uploads
console.log('\nüìÅ Configuration du dossier uploads...');
const uploadsKeep = 'uploads/.gitkeep';
if (!existsSync('uploads')) {
  execSync('mkdir -p uploads');
}
if (!existsSync(uploadsKeep)) {
  writeFileSync(uploadsKeep, '# Ce fichier maintient le dossier uploads dans Git\n');
  console.log('  ‚úÖ .gitkeep cr√©√© pour uploads/');
} else {
  console.log('  ‚úÖ uploads/.gitkeep d√©j√† pr√©sent');
}

// 4. Optimiser les scripts de package.json pour la production
console.log('\nüì¶ V√©rification des scripts de production...');
const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));

const productionOptimizations = {
  'build:prod': 'NODE_ENV=production next build',
  'start:prod': 'NODE_ENV=production next start -p $PORT',
  'postbuild': 'npm run db:generate'
};

let scriptsUpdated = false;
Object.entries(productionOptimizations).forEach(([key, value]) => {
  if (!packageJson.scripts[key]) {
    packageJson.scripts[key] = value;
    scriptsUpdated = true;
    console.log(`  ‚úÖ Script "${key}" ajout√©`);
  }
});

if (scriptsUpdated) {
  writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
  console.log('  üì¶ package.json mis √† jour');
} else {
  console.log('  ‚úÖ Scripts d√©j√† optimis√©s');
}

// 5. Cr√©er un healthcheck endpoint si pas pr√©sent
console.log('\nüè• V√©rification du healthcheck...');
const healthcheckPath = 'src/app/api/health/route.ts';
if (!existsSync(healthcheckPath)) {
  const healthcheckCode = `import { NextResponse } from 'next/server';

export async function GET() {
  try {
    // V√©rifier la connexion √† la base de donn√©es
    const { db } = await import('@/lib/db');
    await db.$queryRaw\`SELECT 1\`;
    
    return NextResponse.json({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      version: process.env.npm_package_version || '1.0.0'
    });
  } catch (error) {
    console.error('Health check failed:', error);
    return NextResponse.json(
      {
        status: 'unhealthy',
        timestamp: new Date().toISOString(),
        error: 'Database connection failed'
      },
      { status: 503 }
    );
  }
}`;

  execSync('mkdir -p src/app/api/health');
  writeFileSync(healthcheckPath, healthcheckCode);
  console.log('  ‚úÖ Endpoint healthcheck cr√©√©');
} else {
  console.log('  ‚úÖ Healthcheck d√©j√† pr√©sent');
}

console.log('\nüéâ Configuration de production termin√©e !');
console.log('\nüìã R√©sum√© des optimisations :');
console.log('  ‚Ä¢ next.config.ts optimis√© avec compression et headers de s√©curit√©');
console.log('  ‚Ä¢ .gitignore configur√© pour ignorer les fichiers sensibles');
console.log('  ‚Ä¢ Dossier uploads pr√©par√© avec .gitkeep');
console.log('  ‚Ä¢ Scripts de production ajout√©s');
console.log('  ‚Ä¢ Endpoint de healthcheck cr√©√© (/api/health)');
console.log('\nüöÄ Pr√™t pour le d√©ploiement ! Utilisez : npm run pre-deploy');
